// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package generatedsql

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (value, question_id, author) VALUES ($1, $2, $3) RETURNING id, value, author, question_id
`

type CreateCommentParams struct {
	Value      string
	QuestionID pgtype.Int8
	Author     string
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRow(ctx, createComment, arg.Value, arg.QuestionID, arg.Author)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.Author,
		&i.QuestionID,
	)
	return i, err
}

const createPoll = `-- name: CreatePoll :one
INSERT INTO
    polls (name)
VALUES
    ($1) RETURNING id, name
`

func (q *Queries) CreatePoll(ctx context.Context, name string) (Poll, error) {
	row := q.db.QueryRow(ctx, createPoll, name)
	var i Poll
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createQuestion = `-- name: CreateQuestion :one
INSERT INTO
    questions (value, poll_id)
VALUES
    ($1, $2) RETURNING id, value, poll_id, votes
`

type CreateQuestionParams struct {
	Value  string
	PollID uuid.UUID
}

func (q *Queries) CreateQuestion(ctx context.Context, arg CreateQuestionParams) (Question, error) {
	row := q.db.QueryRow(ctx, createQuestion, arg.Value, arg.PollID)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.PollID,
		&i.Votes,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, password_hash) VALUES ($1, crypt($2, gen_salt('md5'))) RETURNING id
`

type CreateUserParams struct {
	Name  pgtype.Text
	Crypt string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Crypt)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments WHERE id = ($1)
`

func (q *Queries) DeleteComment(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteComment, id)
	return err
}

const deleteQuestion = `-- name: DeleteQuestion :exec
DELETE FROM questions WHERE questions.id = ($1)
`

func (q *Queries) DeleteQuestion(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteQuestion, id)
	return err
}

const downvote = `-- name: Downvote :one
UPDATE questions SET votes = votes - 1 WHERE questions.id = ($1) RETURNING id, value, poll_id, votes
`

func (q *Queries) Downvote(ctx context.Context, id int64) (Question, error) {
	row := q.db.QueryRow(ctx, downvote, id)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.PollID,
		&i.Votes,
	)
	return i, err
}

const getPoll = `-- name: GetPoll :one
SELECT id, name FROM polls WHERE id = ($1)
`

func (q *Queries) GetPoll(ctx context.Context, id uuid.UUID) (Poll, error) {
	row := q.db.QueryRow(ctx, getPoll, id)
	var i Poll
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getPollQuestions = `-- name: GetPollQuestions :many
SELECT id, value, poll_id, votes FROM questions WHERE questions.poll_id = ($1)
`

func (q *Queries) GetPollQuestions(ctx context.Context, pollID uuid.UUID) ([]Question, error) {
	rows, err := q.db.Query(ctx, getPollQuestions, pollID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Question
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.PollID,
			&i.Votes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQuestionComments = `-- name: GetQuestionComments :many
SELECT id, value, author, question_id FROM comments WHERE comments.question_id = ($1)
`

func (q *Queries) GetQuestionComments(ctx context.Context, questionID pgtype.Int8) ([]Comment, error) {
	rows, err := q.db.Query(ctx, getQuestionComments, questionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.Author,
			&i.QuestionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const login = `-- name: Login :one
SELECT password_hash = crypt($2, password_hash) AS success, users.id, users.name FROM users WHERE users.name = ($1)
`

type LoginParams struct {
	Name  pgtype.Text
	Crypt string
}

type LoginRow struct {
	Success bool
	ID      int64
	Name    pgtype.Text
}

func (q *Queries) Login(ctx context.Context, arg LoginParams) (LoginRow, error) {
	row := q.db.QueryRow(ctx, login, arg.Name, arg.Crypt)
	var i LoginRow
	err := row.Scan(&i.Success, &i.ID, &i.Name)
	return i, err
}

const upvote = `-- name: Upvote :one
UPDATE questions SET votes = votes + 1 WHERE questions.id = ($1) RETURNING id, value, poll_id, votes
`

func (q *Queries) Upvote(ctx context.Context, id int64) (Question, error) {
	row := q.db.QueryRow(ctx, upvote, id)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.PollID,
		&i.Votes,
	)
	return i, err
}
